                                   
                                    Работа в терминале
                                    

				1. Навигация в Linux


1) Пути к файлам



	Адрес файла начинается с корня, корневого системного каталога, к которому подключены все другие. Его адрес - /. И тут нужно сказать про адреса. Пути файлов linux используют прямой слеш "/" для разделения каталогов в адресе, и это отличается от того, что вы привыкли видеть в Windows - \.

	Полный путь файла на рабочем столе в linux будет
		
		/home/sergiy/desktop/
	
	В операционной системе Linux может быть несколько видов путей к файлу. Давайте рассмотрим какие бывают пути в linux:

   -1) Полный, абсолютный путь linux от корня файловой системы - этот путь вы уже видели в примере выше, он начинается от корня "/" и описывает весь путь к файлу;
   
   		/home/sergiy/tmp/file1
   
   -2) Относительный путь linux - это путь к файлу относительно текущей папки, такие пути часто вызывают путаницу
   
   		file1
   	
   		- в данном случае рассмотрен пример, когда файл находится в текущей папке
   
   -3) Путь относительно домашний папки текущего пользователя. - путь в файловой системе, только не от корня, а от папки текущего пользователя.

		~/tmp/file1

	
	В каждой папке есть две скрытые ссылки, мы сможем их увидеть с помощью ls, выполнив ее с параметром -a:

		ls -a

	Первая ссылка указывает на текущую папку (.), вторая (..) указывает на папку уровнем выше. Это открывает еще более широкие возможности для навигации по каталогам. Например, чтобы сослаться на файл в текущей папке можно использовать конструкцию:

		./file1
		
	Это бесполезно при просмотре содержимого файла. Но очень важно при выполнении программы. Поскольку программа будет сначала искаться в среде PATH, а уже потом в этой папке. А потому, если нужно запустить программу, которая находится в текущей папке и она называется точно также как и та что в каталоге /bin, то без явной ссылки что файл нужно искать в текущей папке ничего не получится.

	Вторая ссылка вам позволяет получить доступ к файлам в папке выше текущей. Например:

		ls ../tmp/file1
		

	
	
2) Команда ls для просмотра содержимого папки (каталогаб, директория - это одно и то же)


		ls опции /путь/к/папке

	Опции команды указывают как именно и в каком виде нужно выводить информацию на экран, а путь, это та папка, которую нужно отобразить.
	
	Рассмотрим основные опции утилиты:

    -a - отображать все файлы, включая скрытые, это те, перед именем которых стоит точка;
    -A - не отображать ссылку на текущую папку и корневую папку . и ..;
    --author - выводить создателя файла в режиме подробного списка;
    -b - выводить Escape последовательности вместо непечатаемых символов;
    --block-size - выводить размер каталога или файла в определенной единице измерения, например, мегабайтах, гигабайтах или килобайтах;
    -B - не выводить резервные копии, их имена начинаются с ~;
    -c - сортировать файлы по времени модификации или создания, сначала будут выведены новые файлы;
    -C - выводить колонками;
    --color - включить цветной режим вывода, автоматически активирована во многих дистрибутивах;
    -d - выводить только директории, без их содержимого, полезно при рекурсивном выводе;
    -D - использовать режим вывода, совместимый с Emacs;
    -f - не сортировать;
    -F - показывать тип объекта, к каждому объекту будет добавлен один из специализированных символов */=>@|;
    --full-time - показывать подробную информацию, плюс вся информация о времени в формате ISO;
    -g - показывать подробную информацию, но кроме владельца файла;
    --group-directories-first - сначала отображать директории, а уже потом файлы;
    -G - не выводить имена групп;
    -h - выводить размеры папок в удобном для чтения формате;
    -H - открывать символические ссылки при рекурсивном использовании;
    --hide - не отображать файлы, которые начинаются с указанного символа;
    -i - отображать номер индекса inode, в которой хранится этот файл;
    -l - выводить подробный список, в котором будет отображаться владелец, группа, дата создания, размер и другие параметры;
    -L - для символических ссылок отображать информацию о файле, на который они ссылаются;
    -m - разделять элементы списка запятой;
    -n - выводить UID и GID вместо имени и группы пользователя;
    -N - выводить имена как есть, не обрабатывать контролирующие последовательности;
    -Q - брать имена папок и файлов в кавычки;
    -r - обратный порядок сортировки;
    -R - рекурсивно отображать содержимое поддиректорий;
    -s - выводить размер файла в блоках;
    -S - сортировать по размеру, сначала большие;
    -t - сортировать по времени последней модификации;
    -u - сортировать по времени последнего доступа;
    -U - не сортировать;
    -X - сортировать по алфавиту;
    -Z - отображать информацию о расширениях SELinux;
    -1 - отображать один файл на одну строку.

	 Их можно вывести на экран на странице справки man ls.

	Посмотреть содержимое текущей папки:

		ls
		
	Чтобы посмотреть список файлов в папке linux для точно заданной папки, вам нужно указать путь к ней. Например, смотрим содержимое корневой папки:
	
		ls /
	
	Просмотр содержимого конкретной папки, например, bin/
	
		ls /bin/
		
	Показать содержимое папки, включая скрытые объекты:
	
		 ls -a
		 
	Вывод содержимого в виде списка с подробной информацией об объектах
	
		ls -l
		
		
	
3) Команда cd для перехода в нужную папку (директорию, каталог - это  одно и то же)
		
		
	Это не утилита. Ее нет в файловой системе. Это встроенная команда Bash и меняет текущую папку только для оболочки, в которой выполняется. Вот основной синтаксис команды:

		$ cd опции папка_назначения

	Опций всего две, это -P и -L. Они влияют на то, как будут обрабатываться символы возврата в предыдущую директорию и символические ссылки:

    		-P - позволяет следовать по символическим ссылкам перед тем, как будут обработаны все переходы "..";
    		-L - переходит по символическим ссылкам только после того, как были обработаны "..";
    		-e - если папку, в которую нужно перейти не удалось найти - выдает ошибку.

	Дальше нужно указать директорию, в которую следует перейти. Если этого не сделать, а вызвать cd без параметров, то рабочей папкой будет выбран ваш домашний каталог.

	Для примера перейдём в папку "Загрузки" в домашнем каталоге ~/:
		
		cd ~/Загрузки/     или     cd /home/user_name/Загрузки/

	Вернуться в предыдущую папку:
	
		cd -
		
	Переход в родительский каталог (на уровень выше):
	
		cd ..      - Можно подняться на несколько уровней:       cd ../../
		
	Перейти в домашнюю директорию(каталог):
	
		cd
	или
		cd ~
	или	
		cd /home/user_name/
		
	Ещё один момент, если вам нужно перейти в каталог, в имени которого есть пробелы, используйте символ экранирования обратный слэш "\" или просто возьмите его имя в скобки:

		cd ~/Загрузки/новая\ папка/
	или	
		cd "~/Загрузки/новая папка/"

	Чтобы узнать где мы находимся (в каком директории) необходимо набрать команду:
	
		pwd




		2. Работа с каталогами (папками, директориями - это одно и то же)



1) Создание папок


	Создание папок в Linux выполняется с помощью замечательной утилиты - mkdir. Все что она может - это создавать папки. Рассмотрим ее синтаксис:

		$ mkdir опции имя_папки

	Опций в утилиты не так много, а передавать программе вы чаще всего будете только один параметр - имя папки

		mkdir папка

	В текущей директории будет создана папка с указанным именем. Если нужно создать папку в другой директории, перед именем укажите путь к той директории:

		mkdir Загрузки/папка

	Утилита создаст папку в подпапке Загрузки. Можно использовать не только путь относительно текущей папки, но и указать полный путь в файловой системе:

		mkdir ~/Загрузки/папка

		mkdir /home/имя_вашего_пользователя/папка

	Это собственно все основное. Но еще я хочу вам показать на что способен терминал в отличие от графических программ.

	Например, нам нужно создать несколько папок, тогда можно сделать все одной командой:

		mkdir {папка1,папка2,папка3}

	Если нужно создать папку Ubuntu, а в ней еще несколько папок, можно воспользоваться командой:

		mkdir -p ~/Загрузки/папка/папка/папка/папка

	Или, например, сложная структура:

		mkdir -p ~/Загрузки/папка/{папка1,папка2,папка3}
		
		
		
2)Удаление папок


	Существует несколько команд, которые вы можете использовать для удаления каталога Linux. Рассмотрим их все более подробно. Самый очевидный вариант - это утилита rmdir. Но с помощью нее можно удалять только пустые папки:

		rmdir моя_папка
	
	Другая команда, которую можно применить - это rm. Она предназначена для удаления файлов Linux, но может использоваться и для папок если ей передать опцию рекурсивного удаления -r:

		rm -R моя_папка	
	
	Такая команда уже позволяет удалить непустой каталог Linux. Но, можно по-другому, например, если вы хотите вывести информацию о файлах, которые удаляются:

		rm -Rfv моя_папка	
	
	Команда -R включает рекурсивное удаление всех подпапок и файлов в них, -f - разрешает удалять файлы без запроса, а -v показывает имена удаляемых файлов. В этих примерах я предполагаю что папка которую нужно удалить находится в текущей рабочей папке, например, домашней. Но это необязательно, вы можете указать полный путь к ней начиная от корня файловой системы:

		rm -Rfv /var/www/public_html
		
	Чтобы удалять папки, которые содержат определенные слова в своем имени:

		find . -type d -name "моя_папка" -exec rm -rf {} \;
		
	-type d указывает, что мы ищем только папки, а параметром -name задаем имя нужных папок. Затем с помощью параметра -exec мы выполняем команду удаления. Таким же образом можно удалить только пустые папки, например, в домашней папке:

		find ~/ -empty -type d -delete

	Как видите, в find необязательно выполнять отдельную команду, утилита тоже умеет удалять. Вместо домашней папки, можно указать любой нужный вам путь:

		find /var/www/public_html/ -empty -type d -delete

	Перед удалением вы можете подсчитать количество пустых папок:

		find /var/www/public_html/ -empty -type d | wc -l
		
		
		
		
				3. Работа с файлами
				
	
	
1) Создание текстового файла

	
  - 1) Специальная утилита touch.
	
	
	Она позволяет создать пустой файл в Linux, при этом указывать дату создания, права доступа и другие метаданные.
Чтобы создать пустой файл Linux, просто наберите:
		
		touch файл.txt
		
	Можно создать несколько пустых файлов сразу:
	
		touch файл1 файл2
		
	Опция -t позволяет установить дату создания. Дата указывается опцией -t в формате YYMMDDHHMM.SS. Если не указать, будет установлена текущая дата. Пример:
	
		touch  -t 201601081830.14 файл
		
	Можно использовать дату создания другого файла:
	
		touch -r шаблон файл
		
	Также можно установить дату последней модификации, с помощью опции -m:
	
		touch -m -t 201601081830.14 файл
		
	Или дату последнего доступа:
	
		touch -a -t 201601081830.14 файл
		
	Чтобы посмотреть, действительно ли задаётся информация, которую вы указали, используйте команду stat:
	
		stat файл
		
	
	
  - 2) Оператор перенаправления >
  
  
	Это, наверное, самая короткая команда для создания файла в Linux:

		> файл
		
	Оператор оболочки для перенаправления вывода позволяет записать вывод любой команды в новый файл. Например, можно подсчитать md5 сумму и создать текстовый файл в Linux с результатом выполнения.
	
		md5sum файл > ~/sum.md5
	
	Создание файла с записью в него строки командой echo:
	
		echo "Это строка" > файл.txt
		
	- Этот способ часто используется для создания конфигурационных файлов в Linux, так сказать, на лету. Но заметьте, что sudo здесь работать не будет. С правами суперпользователя выполниться echo, а запись файла уже будет выполнять оболочка с правами пользователя, и вы всё равно получите ошибку Access Denied.
	
	А ещё есть утилита printf, и здесь она тоже поддерживает форматирование вывода.
Этот способ создать файл в Linux используется довольно часто.
	
		printf "Это %d текстовая строка\n" 1 > файл
		
	Ещё тем же способом можно сделать примитивный текстовый редактор для создания файла. Утилита cat без параметров принимает стандартный ввод, используем это:
		
		cat > файл.txt        
				
		- После выполнения команды можете вводить любые символы, которые нужно записать в файл, для сохранения нажмите Ctrl+D.
		
		
		
  - 3) Оператор перенпаравления вывода >>
  
  
	Можно не только перезаписывать файл, а дописывать в него данные, с помощью перенаправления оператора >>. Если файла не существует, будет создан новый, а если существует, то строка запишется в конец.
		
		echo "Это текстовая строка" > файл.txt
		
		echo "Это вторая текстовая строка" >> файл.txt
		
	
		
  - 4) Оператор перенаправления и head
  
  
	С помощью команды head можно выбрать определённый объем данных, чтобы создать текстовый файл большого размера. Данные можно брать, например, с /dev/urandom. Для примера создадим файл размером 100 мегабайт:
	
		base64 /dev/urandom | head -c 100M > файл
		
		
		
  - 5) Утилита dd
  
  
	Это утилита для копирования данных из одного файла в другой. Иногда необходимо создать файл определённого размера в Linux, тогда можно просто создать его на основе /dev/zero или /dev/random, вот так:
	
		dd if=/dev/zero of=~/файл count=20M
		
		- Параметр if указывает, откуда брать данные, а of - куда записывать, count - необходимый размер. Ещё можно указать размер блока для записи с помощью bs, чем больше размер блока, тем быстрее будет выполняться копирование.
		


  - 6) Редактор Nano
  
  
	Самый распространённый способ создать текстовый файл в Linux - это использовать консольные текстовые редакторы. Например nano. После ввода команды открывается редактор, и вы прописываете нужный текст, например:
	
		nano файл.txt
		


  - 7) Редактор vim
  
  
	Серьёзный редактор. Для создания файла и открытия редактора:
	
		 vi файл.txt
		 
	Если вы в первый раз столкнулись с vim, то предупрежу - это необычный редактор. Здесь есть два режима: режим вставки и командный. Переключаться между ними можно с помощью кнопки Esc. Для выхода из редактора в командном режиме наберите :q, для сохранения файла - :w. Вообще, Vim - очень полезный инструмент. Чтобы узнать побольше о его возможностях и выучить основы, выполните: vimtutor.
	

	

2) Удаление файлов


  - 1) Удаление файлов командой rm
  
  	Команда rm позволяет удалить файл. Будьте очень осторожны с ней, она не будет спрашивать подтверждения:
  	
  		rm file
  		
  	! Будьте осторожны, потому что эта команда удаляет файлы безвозвратно !
  	
  		
  	Опции команды rm:
  	
  		-f, --force	-Игнорировать несуществующие файлы, ничего не спрашивать.
  		
		-i		-Спрашивать перед каждым удалением.
		
		-I		-Спрашивать перед удалением более чем 3 файлов и при использовании рекурсивного удаления.
		
		-r, -R, --recursive	-Удаление каталогов и их содержимого рекурсивно.

		-v, --verbose		-Вывод информации об удаляемых каталогах.

		--help			-Вывод справочной информации о команде.

		--version		-Вывод информации о версии.
  		
  		
  	Например, rm file удалит файл с именем file, который находится в текущей папке. Как и в предыдущих вариантах, вы можете указать полный путь к файлу linux. Например:
  	
  		rm /usr/share/file
  		
  	Если вы хотите удалить папку, то нужно использовать опцию -r. Она включает рекурсивное удаление всех файлов и папок на всех уровнях вложенности:
  	
  		rm -r /home/user/photo/
  		
  		
  	! Будьте осторожны, потому что эта команда удаляет файлы безвозвратно !
  	
  	
  	Если необходимо, чтобы удаление папок сопровождалось запросом, то вместе с параметром «-r» можно использовать параметр «-i». В этом случае каждая операция, которую будет выполнять команда, будет требовать разрешения пользователя. При этом команда для удаления папки folder1 будет выглядеть:
  	
  		rm -ri folder1

	Удаление всех файлов в папке.
	В некоторых случаях может возникнуть необходимость удалить все файлы в папке при этом не удаляя саму папку. Для решения такой задачи можно использовать вот такую команду «rm -rf /path/to/directory/*». Данная команда удалит все файлы и папки (рекурсивно удалит все содержимое) по указанному пути:
	
		rm -rf ~/folder2/*
		
	сли же нужно удалить все файлы в папке, но оставить вложенные папки, то это можно сделать командой «rm -f /path/to/directory/*».
	
		rm -f ~/folder2/*
	
		

  - 2) Удаление пустых папок
  
	Команда rmdir позволяет удалить пустую папку. Например, команда rmdir directory удалит папку directory, которая находится в текущей папке:
	
		rmdir directory
		
		- можно удалить сразу несколько папок, переислив их через пробел
		
	Если необходимо удалить каталог, в котором есть другие каталоги (без файлов), то можно воспользоваться параметром «-p». Для этого нужно ввести «rmdir -p» и указать полный путь. Например, если в каталоге folder1 есть другой каталог folder2, то мы можем удалить их сразу одной командой:
	
		rmdir -p folder1/folder2
		
	При использовании параметра «-v» в консоль будет выведена подробная информация о процессе удаления каталогов.
	
		rmdir -p folder1/folder2 -v
		
	А при использовании параметра «--ignore-fail-on-non-empty» команда будет игнорировать ошибки, которые будут возникать при попытке удаления непустых каталогов, при этом сохраняя эти каталоги:
	
		rmdir folder1 folder2 --ignore-fail-on-non-empty
	
	Если вам нужно удалить папку с файлами, то нужно использовать утилиту rm вместе с опцией -r.



 - 3) Поиск и удаление с помощью команды find
 
	Если нужно не просто удалить какую-то определенную папку с файлами, а сначала найти ее, то тут поможет Linux-команда find. Данная команда является мощным инструментом для поиска файлов и выполнения с ними определенных операций. Среди прочего ее можно использовать для поиска и удаления файлов.

	Например, чтобы найти и удалить пустые папки в домашнем каталоге можно выполнить команду:
	
		find ~/ -empty -type d -delete
		
		-данная команда использует следующие параметры:
		
			-empty		-Поиск пустых объектов.

			-type d	-Поиск каталогов.

			-delete	-Удаление найденных объектов.

	Другой пример – поиск и удаление папок с определенным названием. Так, чтобы удалить папки, содержащие в названии слово «test» можно выполнить следующую команду:
	
		find . -type d -name "*test*" -exec rm -rf {} \;
		
		-Данная команда содержит следующие параметры:
		
			-type d	-Поиск каталогов.

			-name		-Поиск объектов с определенным именем.

			-exec		-Выполнение команды.
			



3) Переименование файла


  - 1) Переименование с помощью команды mv
  
  
	В Linux существует замечательная стандартная утилита mv, которая предназначена для перемещения файлов. Но по своей сути перемещение - это то же самое, что и переименование файла linux, если выполняется в одной папке. Давайте сначала рассмотрим синтаксис этой команды:
	
		mv опции файл-источник файл-приемник
		
	Основные опции утилиты, которые могут вам понадобиться:
	
	    -f - заменять файл, если он уже существует;
	    -i - спрашивать, нужно ли заменять существующие файлы;
	    -n - не заменять существующие файлы;
	    -u - заменять файл только если он был изменен;
	    -v - вывести список обработанных файлов;

	Чтобы переименовать файл linux достаточно вызвать утилиту без дополнительных опций. Просто передав ей имя нужного файла и новое имя:
	
		mv file newfile
		
	Как видите, файл был переименован. Вы также можете использовать полный путь к файлу или переместить его в другую папку:
	
		mv /home/sergiy/test/newfile /home/sergiy/test/file1
	
		- Обратите внимание, что у вас должны быть права на запись в ту папку, в которой вы собираетесь переименовывать файлы. Если папка принадлежит другому пользователю, возможно, нужно будет запускать программу через sudo. Но в таком случае лучше запускать с опцией -i, чтобы случайно ничего не удалить.
		


  - 2) Переименование с помощью команды rename
  
  
	В Linux есть еще одна команда, которая позволяет переименовать файл. Это rename. Она специально разработана для этой задачи, поэтому поддерживает такие вещи, как массовое переименование файлов linux и использование регулярных выражений. Синтаксис утилиты тоже сложнее:
	
		rename опции 's/старое_имя/новое_имя' файлы
	или
		rename опции старое_имя новое_имя файлы
		
	В качестве старого имени указывается регулярное выражение или часть имени которую нужно изменить, новое имя указывает на что нужно заменить. Файлы - те, которые нужно обработать, для выбора файлов можно использовать символы подставки, такие как * или ?.
	
	Опции утилиты:
		
	    -v - вывести список обработанных файлов;
	    -n - тестовый режим, на самом деле никакие действия выполнены не будут;
	    -f - принудительно перезаписывать существующие файлы;

	Например, переименуем все htm файлы из текущей папки в .html:
	
		rename 's\.htm/\.html/' *.htm
		
	Или для изображений:
	
		rename 's\.jpeg/\.jpg/'*
		
	Символ звездочки означает, что переименование файлов linux будет выполнено для всех файлов в папке. В регулярных выражениях могут применяться дополнительные модификаторы:
	
	Модификаторы:
		
	    g (Global) - применять ко всем найденным вхождениям;
	    i (Case Censitive) - не учитывать регистр.

	- Модификаторы размещаются в конце регулярного выражения, перед закрывающей кавычкой. Перед тем, как использовать такую конструкцию, желательно ее проверить, чтобы убедиться, что вы не допустили нигде ошибок, тут на помощь приходит опция -n. Заменим все вхождения DSC на photo в именах наших фотографий:
	
		rename -n 's/DSC/photo/gi' *.jpeg
		
	Будут обработаны DSC, DsC и даже dsc, все варианты. Поскольку использовалась опция -n, то утилита только выведет имена изображений, которые будут изменены.

	Можно использовать не только обычную замену, но и полноценные регулярные выражения чтобы выполнить пакетное переименование файлов linux, например, переделаем все имена в нижний регистр:

		rename 'y/A-Z/a-z/'*.jpeg
		
	- Из этого примера мы видим, что даже если такой файл уже существует, то он перезаписан по умолчанию не будет.
	! Не забывайте использовать опцию -n чтобы ничего случайно не повредить !




4) Копирование файлов

	Команда для копирования cp
	
	Для копирования файлов в Linux через терминал используется команда «cp» (от англ. «copy»). Команда «cp» представляет собой утилиту командной строки для копирования файлов и каталогов. Она поддерживает перемещение одного или нескольких файлов или папок с параметрами для создания резервных копий и сохранения атрибутов.

	
	Синтаксис и опции команды cp
	
		cp [опции] источник приемник
		
	Самых опций у команды «cp» очень много, поэтому мы рассмотрим только самые простые и часто используемые. С остальными опциями вы сможете ознакомиться отдельно, выполнив в терминале Linux команду «man cp».
	
	-R , -r , --recursive	-Рекурсивное копирование каталогов.

	-b	-Создание резервной копии для всех файлов, которые могли быть перезаписаны или удалены при копировании.

	-d	-Копирование символических ссылок, а не файлов, на которые они ссылаются.

	-L	-Копировать файлы, а не символические ссылки.

	-l , --link	-Создание жестких ссылок, а не их копирование.

	-P, --no-dereference	-Не переходить по символическим ссылкам.

	-f, --force	-Если существующий файл назначения не может быть открыт, удалите его и повторите попытку.

	-i, --interactive	-Запрос перед перезаписью файлов.

	-n, --no-clobber	-Не перезаписывать файлы.

	-s, --symbolic-link	-Создавать символические ссылки вместо копирования файлов.

	-t, --target-directory=directory	-Обрабатывать место назначения как директорию.

	-T, --no-target-directory	-Обрабатывать место назначения как директорию.

	-u , --update		-Копировать только если исходный файл новее.

	-v , --verbose		-Вывод подробной информации.
	
	Как уже было сказано, для выполнения команды копирования в терминале Linux сначала нужно ввести «cp», потом используемые опции, потом источник, и в конце место назначения. При этом опции из одной буквы можно соединять, например, вместо «-r -v» можно написать просто «-rv».
	
	Примеры копирования с опциями:

		cp -r folder/ newfolder/	-Рекурсивное копирование каталогов.
		    
		cp -rv folder/ newfolder/	-Рекурсивное копирование с выводом подробной информации.
		    
		cp -ri folder/ newfolder/	-Рекурсивное копирование в интерактивном режиме с запросом на перезапись.
		    
		cp -rn folder/ newfolder/	-Рекурсивное копирование без перезаписи.
		    
		cp -ru folder/ newfolder/	-Рекурсивное копирование только новых файлов.


	
	В общем случае, для того чтобы скопировать файл в Linux через терминал достаточно ввести команду «cp» и передать ей имя исходного и нового файла. Например, для того чтобы скопировать «file.txt» в новый «newfile.txt» нужно выполнить следующую команду:
	
		cp file.txt newfile.txt
		
	! Обратите внимание, по умолчанию команда «cp» всегда будет перезаписывать уже имеющиеся файлы копируемыми, но это поведение можно изменить с помощью опций. !
	
	Таким же образом выполняется копирование файла в другую папку. Вводим команду «cp», указываем путь к файлу и затем каталог, в который его нужно скопировать. Например, для того чтобы скопировать «file.txt» в каталог «folder» нужно выполнить вот такую команду:
	
		cp file.txt folder/
		
	Естественно, если это необходимо, вы можете вводить полные пути к файлам и папкам, которые копируете командой «cp». Например, копирование может выглядеть так:
	
		cp ~/temp/newfile.txt ~/temp/folder/
		
	При необходимости можно скопировать сразу несколько файлов. В этом случае сначала нужно перечислить файлы, а потом указать папку, в которую их нужно скопировать. Например, для того чтобы скопировать «file.txt» и «newfile.txt» в каталог «folder» нужно выполнить следующее:
	
		cp file.txt newfile.txt folder/
		
	Аналогичное действие можно выполнить и с помощью маски. Например, для того чтобы скопировать все txt-документы в определенную директорию можно выполнить вот такую команду:
	
		cp *.txt folder/
		
	При копировании каталогов нужно добавлять параметр «-R», так как без этого «cp» будет выдавать ошибку. Поэтому, для копирования каталогов нужно ввести команду «cp -R» и указать исходный и новый каталог. Например, для того чтобы скопировать каталог «folder» в «newfolder» (в данном случае скопировать содержимое папки folder в новую папку newfolder) вам нужно выполнить вот такую команду:
	
		cp -R folder/ newfolder/
		
	Как и в случае с файлами, папки можно копировать сразу по несколько штук. Для этого нужно ввести «cp», перечислить копируемые папки и указать каталог назначения. Например, для того чтобы скопировать папки «folder» и «folder2» в «newbigfolder»  нужно выполнить следующее:
	
		cp -R folder/ folder2/ newbigfolder/
		
		-при копировании нескольких папок в новую создаются копии этих папок в новой папке
	



5) Просмотр содержимого файла или открытие


  - 1) Команды cat и tac
  
  
  	Если вам нужно открыть файл в терминале Linux, то для этого предусмотрено множество простых и эффективных способов. Пожалуй, самая часто используемая команда такого рода – это команда «cat».

	Чтобы использовать ее просто введите «cat» и название файла. Например, если вам нужно просмотреть содержимое файла «file_name.txt», то команда должна выглядеть вот так:
	
		cat file_name.txt
		
		- После выполнение данной команды все содержимое указанного файла будет выведено в терминал Linux. Данный способ вывода удобен для быстрого просмотра небольших файлов.
	
	При использовании команды «cat» может понадобиться нумерация строк. В этом случае команду нужно вводить с параметром «-n»:
	
		cat -n file_name.txt
		
	Также есть команда «tac», которая открывает файлы точно также как «cat», но выводит строки в обратном порядке (начиная с конца):
	
		tac text.txt
	
	

  - 2) Текстовый редактор Nano
  

	Если вам нужно не просто открыть файл в терминале Linux, но и отредактировать его, то лучше всего использовать не «most», а какой-нибудь более продвинутый текстовый редактор для терминала. Например, это может быть редактор Nano.

	Чтобы открыть файл в терминале Linux при помощи редактора Nano нужно выполнить следующую команду:
	
		nano file_name.txt
		
	Интерфейс программы Nano включает в себе верхнюю строку с информацией о редакторе и открытом файле, область редактирование с содержимым открытого файла, нижнюю панель с информацией о комбинациях клавиш.
	
	Для управления текстовым редактором Nano используются следующие комбинации клавиш:

	    Ctrl-G или F1 – просмотр справки;
	    Ctrl-X или F2 – выход из программы;
	    Ctrl-O или F3 – сохранение открытого файла;
	    Ctrl-J или F4 – выровнять текущий абзац;
	    Ctrl-R или F5 – загрузить содержимое другого файла в текущий;
	    Ctrl-W или F6 – выполнить поиск;
	    Ctrl-Y или F7 – пролистать страницу вперед;
	    Ctrl-V или F8 – пролистать страницу назад;
	    Ctrl-K или F9 – вырезать строку и запомнить;
	    Ctrl-U или F10 – вставить;
	    Ctrl-C или F11 – положение курсора;
	    Ctrl-T или F12 – проверить орфографию;
	    
	    
	    

	
	
	
	
	
	
	
	
	
	
	
	
			
		
		
		
		
		
		
		
		
		
		
